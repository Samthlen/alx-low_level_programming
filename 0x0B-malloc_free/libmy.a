!<arch>
//                                              18        `
0-create_array.c/
/0              0           0     0     644     459       `
#include "main.h"
#include <stdlib.h>

/**
 * create_array - creates array of chars and initial sizes with specific char
 * @size: size of array
 * @c: char to fill array
 * Return: Null if size = 0, pointer to array
 */
char *create_array(unsigned int size, char c)
{
	char *ch;
	unsigned int i;

	if (size == 0)
		return (NULL);

	ch = malloc(sizeof(c) * size);

	if (ch == NULL)
		return (NULL);

	for (i = 0; i < size; i++)
		ch[i] = c;

	return (ch);
}


0-main.c/       0           0     0     644     1091      `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
	    unsigned int i;

	        i = 0;
		    while (i < size)
			        {
					        if (i % 10)
							        {
	printf(" ");

										            }

						        if (!(i % 10) && i)

								        {

										            printf("\n");

											            }

							        printf("0x%02x", buffer[i]);

								        i++;

									    }

		        printf("\n");

}



/**
 *
 *  * main - check the code for ALX School students.
 *
 *   *
 *
 *    * Return: Always 0.
 *
 *     */

int main(void)

{

	    char *buffer;



	        buffer = create_array(98, 'H');

		    if  (buffer == NULL)

			        {

					        printf("failed to allocate memory\n");

						        return (1);

							    }

		        simple_print_buffer(buffer, 98);

			    free(buffer);

			        return (0);

}

100-argstostr.c/0           0     0     644     892       `
#include "main.h"
#include <stdlib.h>

/**
 * argstostr - Concatenates all arguments of the program into a string;
 *             arguments are separated by a new line in the string.
 * @ac: The number of arguments passed to the program.
 * @av: An array of pointers to the arguments.
 *
 * Return: If ac == 0, av == NULL, or the function fails - NULL.
 *         Otherwise - a pointer to the new string.
 */
char *argstostr(int ac, char **av)
{
	char *str;
	int arg, byte, index, size = ac;

	if (ac == 0 || av == NULL)
		return (NULL);

	for (arg = 0; arg < ac; arg++)
	{
		for (byte = 0; av[arg][byte]; byte++)
			size++;
	}

	str = malloc(sizeof(char) * size + 1);

	if (str == NULL)
		return (NULL);

	index = 0;

	for (arg = 0; arg < ac; arg++)
	{
		for (byte = 0; av[arg][byte]; byte++)
			str[index++] = av[arg][byte];

		str[index++] = '\n';
	}

	str[size] = '\0';

	return (str);
}
100-main.c/     0           0     0     644     400       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 *
 *  * main - check the code for ALX School students.
 *
 *   *
 *
 *    * Return: Always 0.
 *
 *     */

int main(int ac, char *av[])

{

	    char *s;



	        s = argstostr(ac, av);

		    if (s == NULL)

			        {

					        return (1);

						    }

		        printf("%s", s);

			    free(s);

			        return (0);

}
101-main.c/     0           0     0     644     558       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 * print_tab - Prints an array of string
 * @tab: The array to print
 *
 * Return: nothing
 */
void print_tab(char **tab)
{
	int i;

	for (i = 0; tab[i] != NULL; ++i)
	{
		printf("%s\n", tab[i]);
	}
}

/**
 * main - check the code for ALX School students.
 *
 * Return: 1 if an error occurred, 0 otherwise
 */
int main(void)
{
	char **tab;

	tab = strtow("      Holberton School         #cisfun      ");
	if (tab == NULL)
	{
		printf("Failed\n");
		return (1);
	}
	print_tab(tab);
	return (0);
}
101-strtow.c/   0           0     0     644     1853      `
#include "main.h"
#include <stdlib.h>

int word_len(char *str);
int count_words(char *str);
char **strtow(char *str);

/**
 * word_len - Locates the index marking the end of the
 *            first word contained within a string.
 * @str: The string to be searched.
 *
 * Return: The index marking the end of the initial word pointed to by str.
 */
int word_len(char *str)
{
	int index = 0, len = 0;

	while (*(str + index) && *(str + index) != ' ')
	{
		len++;
		index++;
	}

	return (len);
}

/**
 * count_words - Counts the number of words contained within a string.
 * @str: The string to be searched.
 *
 * Return: The number of words contained within str.
 */
int count_words(char *str)
{
	int index = 0, words = 0, len = 0;

	for (index = 0; *(str + index); index++)
		len++;

	for (index = 0; index < len; index++)
	{
		if (*(str + index) != ' ')
		{
			words++;
			index += word_len(str + index);
		}
	}

	return (words);
}

/**
 * strtow - Splits a string into words.
 * @str: The string to be split.
 *
 * Return: If str = NULL, str = "", or the function fails - NULL.
 *         Otherwise - a pointer to an array of strings (words).
 */
char **strtow(char *str)
{
	char **strings;
	int index = 0, words, w, letters, l;

	if (str == NULL || str[0] == '\0')
		return (NULL);

	words = count_words(str);
	if (words == 0)
		return (NULL);

	strings = malloc(sizeof(char *) * (words + 1));
	if (strings == NULL)
		return (NULL);

	for (w = 0; w < words; w++)
	{
		while (str[index] == ' ')
			index++;

		letters = word_len(str + index);

		strings[w] = malloc(sizeof(char) * (letters + 1));

		if (strings[w] == NULL)
		{
			for (; w >= 0; w--)
				free(strings[w]);

			free(strings);
			return (NULL);
		}

		for (l = 0; l < letters; l++)
			strings[w][l] = str[index++];

		strings[w][l] = '\0';
	}
	strings[w] = NULL;

	return (strings);
}


1-main.c/       0           0     0     644     416       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 * main - check the code for ALX School students.
 *
 * Return: Always 0.
 */

int main(void)

{

	    char *s;



	        s = _strdup("Holberton");

		    if (s == NULL)

			        {

					        printf("failed to allocate memory\n");

						        return (1);

							    }

		        printf("%s\n", s);

			    free(s);

			        return (0);

}
1-strdup.c/     0           0     0     644     488       `
#include "main.h"
#include <stdlib.h>
/**
 * _strdup - returns a pointer to a newly allocated space in memory.
 * @str: string
 * Return: pointer of an array of chars
 */
char *_strdup(char *str)
{
	char *output_str;
	unsigned int i, j;

	if (str == NULL)
		return (NULL);

	for (i = 0; str[i] != '\0'; i++)
		;

	output_str = (char *)malloc(sizeof(char) * (i + 1));

	if (output_str == NULL)
		return (NULL);

	for (j = 0; j <= i; j++)
		output_str[j] = str[j];

	return (output_str);
}
2-main.c/       0           0     0     644     311       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 * main - check the code for ALX School students.
 *
 * Return: Always 0.
 */
int main(void)
{
	char *s;

	s = str_concat("Betty ", "Holberton");
	if (s == NULL)
	{
		printf("failed\n");
		return (1);
	}
	printf("%s\n", s);
	free(s);
	return (0);
}

2-str_concat.c/ 0           0     0     644     634       `
#include "main.h"
#include <stdlib.h>

/**
 * str_concat - concatenates two strings
 * @s1: first string
 * @s2: second string
 * Return: pointer to an array of chars
 */
char *str_concat(char *s1, char *s2)
{
	char *outstr;
	unsigned int i, j, k, limit;

	if (s1 == NULL)
		s1 = "";
	if (s2 == NULL)
		s2 = "";

	for (i = 0; s1[i] != '\0'; i++)
		;

	for (j = 0; s2[j] != '\0'; j++)
		;

	outstr = malloc(sizeof(char) * (i + j + 1));

	if (outstr == NULL)
	{
		free(outstr);
		return (NULL);
	}

	for (k = 0; k < i; k++)
		outstr[k] = s1[k];

	limit = j;
	for (j = 0; j <= limit; k++, j++)
		outstr[k] = s2[j];

	return (outstr);
}

3-alloc_grid.c/ 0           0     0     644     734       `
#include "main.h"
#include <stdlib.h>

/**
 * alloc_grid - returns a pointer to a 2D array of integers.
 * @width: width
 * @height: height
 * Return: pointer of an array of integers
 */
int **alloc_grid(int width, int height)
{
	int **arr_print;
	int i, j;

	if (width < 1 || height < 1)
		return (NULL);

	arr_print = malloc(height * sizeof(int *));
	if (arr_print == NULL)
	{
		free(arr_print);
		return (NULL);
	}

	for (i = 0; i < height; i++)
	{
		arr_print[i] = malloc(width * sizeof(int));
		if (arr_print[i] == NULL)
		{
			for (i--; i >= 0; i--)
				free(arr_print[i]);
			free(arr_print);
			return (NULL);
		}
	}

	for (i = 0; i < height; i++)
		for (j = 0; j < width; j++)
			arr_print[i][j] = 0;

	return (arr_print);
}
3-main.c/       0           0     0     644     744       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 * print_grid - prints a grid of integers
 * @grid: the address of the two dimensional grid
 * @width: width of the grid
 * @height: height of the grid
 * Return: Nothing.
 */
void print_grid(int **grid, int width, int height)
{
	int w;
	int h;

	h = 0;
	while (h < height)
	{
		w = 0;
		while (w < width)
		{
			printf("%d ", grid[h][w]);
			w++;
		}
		printf("\n");
		h++;
	}   
}

/**
 * main - check the code for ALX School students.
 *
 * Return: Always 0.
 *
 */
int main(void)
{
	int **grid;

	grid = alloc_grid(6, 4);
	if (grid == NULL)
	{
		return (1);
	}
	print_grid(grid, 6, 4);
	printf("\n");
	grid[0][3] = 98;
	grid[3][4] = 402;
	print_grid(grid, 6, 4);
	return (0);
}
4-free_grid.c/  0           0     0     644     342       `
#include "main.h"
#include <stdlib.h>

/**
 * free_grid - frees  up a 2 dimensional grid
 * @grid: multidimensional array of integers
 * @height: height of the grid
 * Return: no return
 */
void free_grid(int **grid, int height)
{
	if (grid != NULL && height != 0)
	{
		for (; height >= 0; height--)
			free(grid[height]);
		free(grid);
	}
}
4-main.c/       0           0     0     644     1205      `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 *
 *  * print_grid - prints a grid of integers
 *
 *   * @grid: the address of the two dimensional grid
 *
 *    * @width: width of the grid
 *
 *     * @height: height of the grid
 *
 *      *
 *
 *       * Return: Nothing.
 *
 *        */

void print_grid(int **grid, int width, int height)

{

	    int w;

	        int h;



		    h = 0;

		        while (h < height)

				    {

					            w = 0;

						            while (w < width)

								            {

										                printf("%d ", grid[h][w]);

												            w++;

													            }

							            printf("\n");

								            h++;

									        }   

}



/**
 *
 *  * main - check the code for ALX School students.
 *
 *   *
 *
 *    * Return: Always 0.
 *
 *     */

int main(void)

{

	    int **grid;



	        grid = alloc_grid(6, 4);

		    if (grid == NULL)

			        {

					        return (1);

						    }

		        print_grid(grid, 6, 4);

			    printf("\n");

			        grid[0][3] = 98;

				    grid[3][4] = 402;

				        print_grid(grid, 6, 4);

					    free_grid(grid, 4);

					        return (0);

}

